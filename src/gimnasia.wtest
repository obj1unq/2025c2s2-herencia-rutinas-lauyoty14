import src.personas.*
import src.gimnasia.*
import src.clubes.*

describe "rutinas" {
	const correrEnLaPlaya = new Running(intensidad = 1.2)
	const remarEnElDelta = new Remo()
	const remarEnCaminoRemeros = new RemoDeCompeticion()
	const maratonBA = new Maraton(intensidad = 1.5)
	const calamardo = new PersonaSedentaria(peso = 60, tiempo = 5)
 	const bob =  new PersonaAtleta(peso = 40)

	test "Punto 1 : rutinas" {
		// Pruebas para Running
		assert.equals(360, correrEnLaPlaya.calorias(5))	
		assert.equals(10200, correrEnLaPlaya.calorias(90))
		// Pruebas para Maratón
		assert.equals(900, maratonBA.calorias(5))
		assert.equals(25500, maratonBA.calorias(90))
		// Pruebas para Remo
		assert.equals(520, remarEnElDelta.calorias(5))
		assert.equals(9360, remarEnElDelta.calorias(90))
		// Pruebas para Remo de Competición
		assert.equals(510, remarEnCaminoRemeros.calorias(5))
		assert.equals(12750, remarEnCaminoRemeros.calorias(90))
	}

	test '2.1.1 test sedentario running' {
		// hacer que calamardo practique correrEnLaPlaya
		// el peso de calamardo debería ser 59.948 (truncado a 3 decimales)
		calamardo.aplicarRutina(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
	} 

	test '2.1.2 test sedentario maraton' {
		// hacer que calamardo practique maratonBA
		// el peso de calamardo debería ser 59.871 (truncado a 3 decimales)
		calamardo.aplicarRutina(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo' {
		// hacer que calamardo practique remarEnElDelta
		// el peso de calamardo debería ser 59.925 (truncado a 3 decimales)
		calamardo.aplicarRutina(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
	} 

	test '2.1.3 test sedentario remo competicion' {
		// hacer que calamardo practique remarEnCaminoRemeros
		// el peso de calamardo debería ser 59.927 (truncado a 3 decimales)
		calamardo.aplicarRutina(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
	} 

	test '2.1.5 test sedentario no puede practicar' {
		// Hacer que el peso de calamardo sea 40
		// hacer que calamardo practique correrEnLaPlaya (NO SE PUEDE!)
		// el peso de calamardo debería ser 40
		calamardo.peso(40)
		calamardo.aplicarRutina(correrEnLaPlaya)
		assert.equals(40, calamardo.peso().truncate(3))
	} 

	test "2.2.1 test atleta running" {
		// hacer que bob practique correrEnLaPlaya
		// el peso de bob debería ser 39.725 (truncado a 3 decimales)
		bob.aplicarRutina(correrEnLaPlaya)
		assert.equals(39.725, bob.peso().truncate(3))
	}

	test "2.2.2 test atleta maraton" {
		// hacer que bob practique maratonBA
		// el peso de bob debería ser 37.812 (truncado a 3 decimales)
		bob.aplicarRutina(maratonBA)
		assert.equals(37.812, bob.peso().truncate(3))
	}

	test "2.2.3 test atleta remo" {
		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
		// el peso de bob debería ser 40 
		bob.aplicarRutina(remarEnElDelta)
		assert.equals(40, bob.peso().truncate(3))
	}

	test "2.2.3 test atleta remo de competición" {
		// hacer que bob practique remarEnCaminoRemeros
		// el peso de bob debería ser 39.406
		bob.aplicarRutina(remarEnCaminoRemeros)
		assert.equals(39.406, bob.peso().truncate(3))
	}

	test "3.1 el mejor predio" {
		// El mejor predio del clubBarrial para bob debería ser recreo
		// El mejor predio del clubBarrial para calamardo debería ser recreo
		// Definimos el clubBarrial y el recreo
		const recreo = new Predio(rutinas = [correrEnLaPlaya, maratonBA])
		const nautico = new Predio(rutinas = [remarEnElDelta, remarEnCaminoRemeros])
		const clubBarrial = new Club(predios = [recreo, nautico])

		
		// Mejor predio para Bob
		assert.equals(recreo, clubBarrial.mejorPredioPara(bob))

		// Mejor predio para Calamardo
		assert.equals(recreo, clubBarrial.mejorPredioPara(calamardo))
	}

	test "3.2 predios tranquis" {
		// No debería haber predios tranquis en el clubBarrial para bob
		// Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo  
		const recreo = new Predio(rutinas = [correrEnLaPlaya, maratonBA])
		const nautico = new Predio(rutinas = [remarEnElDelta, remarEnCaminoRemeros])
		const clubBarrial = new Club(predios = [recreo, nautico])

		// Predios tranquis para Bob (deberían ser vacíos)
		assert.equals([], clubBarrial.prediosTranquis(bob))

		// Predios tranquis para Calamardo
		assert.equals([recreo], clubBarrial.prediosTranquis(calamardo))
	}

	test "3.3 rutinas más exigentes" {
		// Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
		// Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
		const recreo = new Predio(rutinas = [correrEnLaPlaya, maratonBA])
		const nautico = new Predio(rutinas = [remarEnElDelta, remarEnCaminoRemeros])
		const clubBarrial = new Club(predios = [recreo, nautico])

		// Rutinas más exigentes para Bob
		assert.equals([maratonBA, remarEnCaminoRemeros], clubBarrial.rutinasMasExigentes(bob))

		// Rutinas más exigentes para Calamardo
		assert.equals([maratonBA, remarEnElDelta], clubBarrial.rutinasMasExigentes(calamardo))
	}
}